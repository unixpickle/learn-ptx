.version 7.0
.target sm_50 // enough for my Titan X
.address_size 64

// Unrolled version of sort_bitonic_warp.ptx

.visible .entry sortBitonicWarpV2 (
    .param .u64 ptr
) {
    .reg .pred %p0;
    .reg .pred %reverse;

    // Arguments
    .reg .u64 %ptr;

    // Cached thread properties
    .reg .u32 %tidX;

    // Other variables.
    .reg .u64 %dtmp<2>;
    .reg .u32 %stmp<2>;
    .reg .u32 %i;
    .reg .u32 %j;
    .reg .f32 %val<2>;

    // Load arguments and thread properties.
    ld.param.u64 %ptr, [ptr];
    mov.u32 %tidX, %tid.x;

    cvt.u64.u32 %dtmp0, %ctaid.x;
    shl.b64 %dtmp0, %dtmp0, 5;
    cvt.u64.u32 %dtmp1, %tidX;
    add.u64 %dtmp0, %dtmp0, %dtmp1;
    shl.b64 %dtmp0, %dtmp0, 2; // 4*(ctaid.x*32 + tid.x)
    add.u64 %ptr, %ptr, %dtmp0;
    ld.global.f32 %val0, [%ptr];

/*

for i in range(5):
    print("")
    print(f"    // {i=}")
    print(f"    and.b32 %stmp0, %tidX, {2 << i};")
    print(f"    setp.ne.u32 %reverse, %stmp0, 0;")

    for j in range(i, -1, -1):
        print(f"    // {j=}")
        print(f"    and.b32 %stmp1, %tidX, {1 << j};")
        print(f"    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;")
        print(f"    shfl.sync.bfly.b32 %val1, %val0, {1 << j}, 0x1f, 0xffffffff;")
        print(f"    setp.lt.xor.f32 %p0, %val0, %val1, %p0;")
        print(f"    selp.f32 %val0, %val1, %val0, %p0;")

*/

loop_start:
    // i=0
    and.b32 %stmp0, %tidX, 2;
    setp.ne.u32 %reverse, %stmp0, 0;
    // j=0
    and.b32 %stmp1, %tidX, 1;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 1, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
 
    // i=1
    and.b32 %stmp0, %tidX, 4;
    setp.ne.u32 %reverse, %stmp0, 0;
    // j=1
    and.b32 %stmp1, %tidX, 2;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 2, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=0
    and.b32 %stmp1, %tidX, 1;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 1, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
 
    // i=2
    and.b32 %stmp0, %tidX, 8;
    setp.ne.u32 %reverse, %stmp0, 0;
    // j=2
    and.b32 %stmp1, %tidX, 4;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 4, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=1
    and.b32 %stmp1, %tidX, 2;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 2, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=0
    and.b32 %stmp1, %tidX, 1;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 1, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
 
    // i=3
    and.b32 %stmp0, %tidX, 16;
    setp.ne.u32 %reverse, %stmp0, 0;
    // j=3
    and.b32 %stmp1, %tidX, 8;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 8, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=2
    and.b32 %stmp1, %tidX, 4;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 4, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=1
    and.b32 %stmp1, %tidX, 2;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 2, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=0
    and.b32 %stmp1, %tidX, 1;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 1, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
 
    // i=4
    and.b32 %stmp0, %tidX, 32;
    setp.ne.u32 %reverse, %stmp0, 0;
    // j=4
    and.b32 %stmp1, %tidX, 16;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 16, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=3
    and.b32 %stmp1, %tidX, 8;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 8, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=2
    and.b32 %stmp1, %tidX, 4;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 4, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=1
    and.b32 %stmp1, %tidX, 2;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 2, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
    // j=0
    and.b32 %stmp1, %tidX, 1;
    setp.eq.xor.u32 %p0, %stmp1, 0, %reverse;
    shfl.sync.bfly.b32 %val1, %val0, 1, 0x1f, 0xffffffff;
    setp.lt.xor.f32 %p0, %val0, %val1, %p0;
    selp.f32 %val0, %val1, %val0, %p0;
loop_end:

    st.global.f32 [%ptr], %val0;
    ret;
}
