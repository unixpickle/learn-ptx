.version 7.0
.target sm_50 // enough for my Titan X
.address_size 64

// Perform farthest point sampling with a single block.
// Takes buffer of points, temporary buffer of distances,
// and output pointer.
//
// Similar to fps_block.ptx, except uses fewer memory
// accesses and is overall less redundant.

.visible .entry farthestPointSampleBlockV2 (
    .param .u64 ptrIn,
    .param .u64 tmpBuffer,
    .param .u64 ptrOut,
    .param .u64 inCount,
    .param .u64 outCount
) {
    .reg .pred %p0;

    // Arguments
    .reg .u64 %ptrIn;
    .reg .u64 %tmpBuffer;
    .reg .u64 %ptrOut;
    .reg .u64 %inCount;
    .reg .u64 %outCount;
    .reg .u64 %tidX;
    .reg .u64 %blockSize;

    // Buffers for communicating indices across warps.
    .shared .align 4 .f32 largestDist[32];
    .shared .align 8 .u64 largestIndex[32];

    // Load arguments and thread properties.
    ld.param.u64 %ptrIn, [ptrIn];
    ld.param.u64 %tmpBuffer, [tmpBuffer];
    ld.param.u64 %ptrOut, [ptrOut];
    ld.param.u64 %inCount, [inCount];
    ld.param.u64 %outCount, [outCount];

    cvt.u64.u32 %tidX, %tid.x;
    cvt.u64.u32 %blockSize, %ntid.x;

    // Initialize the distance buffer to infinity.
    {
        .reg .u64 %i;
        .reg .u64 %offset;
        .reg .u64 %addr;
        .reg .f32 %inf;

        div.approx.f32 %inf, 1.0, 0.0;

        mov.u64 %i, 0;
        init_loop:
            add.u64 %offset, %i, %tidX;
            setp.lt.u64 %p0, %offset, %inCount;
            mad.lo.u64 %addr, %offset, 4, %tmpBuffer;
            @%p0 st.global.f32 [%addr], %inf;

            add.u64 %i, %i, %blockSize;
            setp.lt.u64 %p0, %i, %inCount;
            @%p0 bra.uni init_loop;
        init_loop_end:
    }

    // Make the first distance negative so we never pick this point again.
    setp.eq.u64 %p0, %tidX, 0;
    @%p0 st.global.f32 [%tmpBuffer], -1.0;

    // Loop until we have selected enough points.
    {
        .reg .u64 %i;
        .reg .u64 %nextIndex;
        mov.u64 %nextIndex, 0;
        mov.u64 %i, 0;
    loop_start:
        // Both this and %nextIndex will be updated as we compute
        // new distances so we can find the next point.
        .reg .f32 %localMaxDist;
        mov.f32 %localMaxDist, -1.0;
        {
            // Read the point on all ranks.
            .reg .f32 %nextPointX;
            .reg .f32 %nextPointY;
            .reg .f32 %nextPointZ;

            {
                .reg .u64 %nextPointAddr;
                mad.lo.u64 %nextPointAddr, %nextIndex, 12, %ptrIn;
                ldu.global.f32 %nextPointX, [%nextPointAddr];
                ldu.global.f32 %nextPointY, [%nextPointAddr+4];
                ldu.global.f32 %nextPointZ, [%nextPointAddr+8];
            }

            // Write output from the first thread.
            {
                .reg .u64 %nextOutput;
                mad.lo.u64 %nextOutput, %i, 12, %ptrOut;
                setp.eq.u64 %p0, %tidX, 0;
                @%p0 st.global.f32 [%nextOutput], %nextPointX;
                @%p0 st.global.f32 [%nextOutput+4], %nextPointY;
                @%p0 st.global.f32 [%nextOutput+8], %nextPointZ;
            }

            // Compute new distances and take the minimum.
            // Also update %nextIndex and %localMaxDist.
            {
                .reg .pred %p1;
                .reg .u64 %j;
                .reg .f32 %tmpPointX;
                .reg .f32 %tmpPointY;
                .reg .f32 %tmpPointZ;
                .reg .u64 %curIn;
                .reg .u64 %curOut;
                .reg .u64 %strideIn;
                .reg .u64 %strideOut;
                .reg .f32 %ftmp<3>;
                .reg .u64 %prevIndex;
                .reg .u64 %localOffset;

                // We may modify %nextIndex as we find the
                // new maximum distance.
                mov.u64 %prevIndex, %nextIndex;

                mad.lo.u64 %curIn, %tidX, 12, %ptrIn;
                mad.lo.u64 %curOut, %tidX, 4, %tmpBuffer;
                mul.lo.u64 %strideIn, %blockSize, 12;
                shl.b64 %strideOut, %blockSize, 2;

                mov.u64 %j, 0;
            update_distances_loop:
                add.u64 %localOffset, %j, %tidX;
                setp.lt.u64 %p0, %localOffset, %inCount;
                setp.eq.u64 %p1, %localOffset, %prevIndex;

                @%p0 ld.global.f32 %tmpPointX, [%curIn];
                @%p0 ld.global.f32 %tmpPointY, [%curIn+4];
                @%p0 ld.global.f32 %tmpPointZ, [%curIn+8];

                // Squared euclidean distance.
                sub.f32 %ftmp0, %nextPointX, %tmpPointX;
                sub.f32 %ftmp1, %nextPointY, %tmpPointY;
                sub.f32 %ftmp2, %nextPointZ, %tmpPointZ;
                mul.f32 %ftmp0, %ftmp0, %ftmp0;
                fma.rn.f32 %ftmp0, %ftmp1, %ftmp1, %ftmp0;
                fma.rn.f32 %ftmp0, %ftmp2, %ftmp2, %ftmp0;
                @%p0 ld.global.f32 %ftmp1, [%curOut];
                @%p1 mov.f32 %ftmp1, -1.0; // store -1 at the last used point
                min.f32 %ftmp2, %ftmp0, %ftmp1;
                @%p0 st.global.f32 [%curOut], %ftmp2;

                // Update the distance/index for the next point.
                setp.gt.f32 %p1, %ftmp2, %localMaxDist;
                @%p1 mov.f32 %localMaxDist, %ftmp2;
                @%p1 mov.u64 %nextIndex, %localOffset;

                add.u64 %curIn, %curIn, %strideIn;
                add.u64 %curOut, %curOut, %strideOut;
                add.u64 %j, %j, %blockSize;
                setp.lt.u64 %p0, %j, %inCount;
                @%p0 bra.uni update_distances_loop;
            update_distances_loop_end:
            }
        }

        // Find the maximum distance across the entire block,
        // to figure out the next point to choose.
        {
            // Reduce across this warp.
            {
                .reg .u32 %xorMask;
                .reg .f32 %otherMaxDist;
                .reg .u32 %otherIndex<2>;
                .reg .u64 %otherIndex;
                mov.u32 %xorMask, 1;
            reduction_loop:
                shfl.sync.bfly.b32 %otherMaxDist, %localMaxDist, %xorMask, 0x1f, 0xffffffff;
                mov.b64 {%otherIndex1, %otherIndex0}, %nextIndex;
                shfl.sync.bfly.b32 %otherIndex0, %otherIndex0, %xorMask, 0x1f, 0xffffffff;
                shfl.sync.bfly.b32 %otherIndex1, %otherIndex1, %xorMask, 0x1f, 0xffffffff;
                mov.b64 %otherIndex, {%otherIndex1, %otherIndex0};

                // Keep other value if it's greater or if it has a lower
                // index and is equal.
                setp.eq.f32 %p0, %localMaxDist, %otherMaxDist;
                setp.lt.and.u64 %p0, %otherIndex, %nextIndex, %p0;
                setp.gt.or.f32 %p0, %otherMaxDist, %localMaxDist, %p0;

                @%p0 mov.u64 %nextIndex, %otherIndex;
                @%p0 mov.f32 %localMaxDist, %otherMaxDist;
                shl.b32 %xorMask, %xorMask, 1;
                setp.lt.u32 %p0, %xorMask, 32;
                @%p0 bra.uni reduction_loop;
            reduction_loop_end:
            }

            // Write each warp's maximum to shared memory.
            .reg .u32 %sharedAddr;
            .reg .u32 %warpIndex;
            .reg .u32 %threadInWarp;
            cvt.u32.u64 %warpIndex, %tidX;
            and.b32 %threadInWarp, %warpIndex, 0x1f;
            shr.b32 %warpIndex, %warpIndex, 5;

            // Write one output from the first thread of each warp.
            setp.eq.u32 %p0, %threadInWarp, 0;
            mov.u32 %sharedAddr, largestDist;
            mad.lo.u32 %sharedAddr, %warpIndex, 4, %sharedAddr;
            @%p0 st.shared.f32 [%sharedAddr], %localMaxDist;
            mov.u32 %sharedAddr, largestIndex;
            mad.lo.u32 %sharedAddr, %warpIndex, 8, %sharedAddr;
            @%p0 st.shared.u64 [%sharedAddr], %nextIndex;

            // Make sure all writes are finished.
            bar.sync 0;

            // Read the entire shared buffer on each warp.
            // Each warp will now have an independent copy of the
            // exact same values to reduce.
            mov.u32 %sharedAddr, largestDist;
            mad.lo.u32 %sharedAddr, %threadInWarp, 4, %sharedAddr;
            ld.shared.f32 %localMaxDist, [%sharedAddr];
            mov.u32 %sharedAddr, largestIndex;
            mad.lo.u32 %sharedAddr, %threadInWarp, 8, %sharedAddr;
            ld.shared.u64 %nextIndex, [%sharedAddr];

            // Perform another reduction across the warp.
            // Exact copy of the above reduction loop.
            {
                .reg .u32 %xorMask;
                .reg .f32 %otherMaxDist;
                .reg .u32 %otherIndex<2>;
                .reg .u64 %otherIndex;
                mov.u32 %xorMask, 1;
            reduction_loop_1:
                shfl.sync.bfly.b32 %otherMaxDist, %localMaxDist, %xorMask, 0x1f, 0xffffffff;
                mov.b64 {%otherIndex1, %otherIndex0}, %nextIndex;
                shfl.sync.bfly.b32 %otherIndex0, %otherIndex0, %xorMask, 0x1f, 0xffffffff;
                shfl.sync.bfly.b32 %otherIndex1, %otherIndex1, %xorMask, 0x1f, 0xffffffff;
                mov.b64 %otherIndex, {%otherIndex1, %otherIndex0};

                // Keep other value if it's greater or if it has a lower
                // index and is equal.
                setp.eq.f32 %p0, %localMaxDist, %otherMaxDist;
                setp.lt.and.u64 %p0, %otherIndex, %nextIndex, %p0;
                setp.gt.or.f32 %p0, %otherMaxDist, %localMaxDist, %p0;

                @%p0 mov.u64 %nextIndex, %otherIndex;
                @%p0 mov.f32 %localMaxDist, %otherMaxDist;
                shl.b32 %xorMask, %xorMask, 1;
                setp.lt.u32 %p0, %xorMask, 32;
                @%p0 bra.uni reduction_loop_1;
            reduction_loop_1_end:
            }
        }

        // Make sure all writes are visible past this point.
        bar.sync 0;
        membar.cta;

        add.u64 %i, %i, 1;
        setp.lt.u64 %p0, %i, %outCount;
        @%p0 bra.uni loop_start;
    loop_end:
    }

    ret;
}
